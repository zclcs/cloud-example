version: '3.5'
# docker network create -d bridge zclcs_net 部署前 创建网络群组
services:
  mysql:
    image: ${CLOUD_DEPOSITORY_IP_PORT}/library/mysql:5.7.35
    container_name: ${NACOS_NAMESPACE}-mysql
    networks:
      - cloud_net
    restart: unless-stopped
    environment:
      # 设置密码
      MYSQL_ROOT_PASSWORD: ${DATASOURCE_PASSWORD}
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes:
      #挂载 MySQL数据
      - ./mysql/data:/var/lib/mysql
      #挂载 MySQL日志
      #      - ./mysql/log:/var/log/mysql
      #挂载 MySQL配置文件
      - ./mysql/conf:/etc/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    env_file: .env
  redis:
    image: ${CLOUD_DEPOSITORY_IP_PORT}/library/redis:7.0.5
    container_name: ${NACOS_NAMESPACE}-redis
    networks:
      - cloud_net
    restart: unless-stopped
    environment:
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    command:
      - /bin/bash
      - -c
      - |
        echo 1 > /proc/sys/vm/overcommit_memory
        echo 1000 > /proc/sys/net/core/somaxconn
        redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD} --appendonly no
    volumes:
      - ./redis/data:/data #挂载 Redis数据
      - ./redis/conf/redis.conf:/etc/redis/redis.conf #挂载 Redis配置
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 512M
    privileged: true
    user: root
    env_file: .env
  nacos:
    image: ${CLOUD_DEPOSITORY_IP_PORT}/library/nacos-server:v2.2.1
    container_name: ${NACOS_NAMESPACE}-nacos
    networks:
      - cloud_net
    restart: unless-stopped
    environment:
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      JVM_XMS: 512m   #-Xms default :2g
      JVM_XMX: 512m   #-Xmx default :2g
      JVM_XMN: 64m    #-Xmn default :1g
      JVM_MS: 64m     #-XX:MetaspaceSize default :128m
      JVM_MMS: 128m    #-XX:MaxMetaspaceSize default :320m
    volumes:
      - ./nacos/standalone-logs/:/home/nacos/logs
      - ./nacos/init.d/application.properties:/home/nacos/conf/application.properties
    healthcheck:
      test: [ "CMD", "nc", "-vz", "${NACOS_HOST}", "${NACOS_SERVER_PORT}" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 512M
    env_file: .env
    depends_on:
      third-part-database-sync:
        condition: service_healthy
  minio:
    image: ${CLOUD_DEPOSITORY_IP_PORT}/library/minio:RELEASE.2021-06-17T00-10-46Z
    container_name: ${NACOS_NAMESPACE}-minio
    networks:
      - cloud_net
    restart: unless-stopped
    environment:
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      #管理后台用户名
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      #管理后台密码，最小8个字符
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
    volumes:
      #映射当前目录下的data目录至容器内/data目录
      - ./minio/data:/data
      #映射配置目录
      - ./minio/config:/root/.minio/
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS 'http://${MINIO_HOST}:${MINIO_PORT}/minio/index.html' || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    env_file: .env
    command: server /data
  rabbitmq:
    image: ${CLOUD_DEPOSITORY_IP_PORT}/library/rabbitmq:3.9.13-management
    container_name: ${NACOS_NAMESPACE}-rabbitmq
    networks:
      - cloud_net
    restart: unless-stopped
    environment:
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      RABBITMQ_DEFAULT_USER: ${RABBIT_MQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_MQ_PASSWORD}
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
      - ./rabbitmq/conf:/etc/rabbitmq
    #      - ./rabbitmq/log:/var/log/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    deploy:
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 1024M
    env_file: .env
  nginx:
    image: ${CLOUD_DEPOSITORY_IP_PORT}/library/nginx:1.21.3
    container_name: ${NACOS_NAMESPACE}-nginx
    networks:
      - cloud_net
    restart: unless-stopped
    ports:
      - "9527:9527"
    environment:
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/templates:/etc/nginx/templates
      #      - ./nginx/log:/var/log/nginx
      - ./web:/var/cloud/web
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    env_file: .env
    privileged: true
    user: root
    depends_on:
      platform-gateway:
        condition: service_healthy
  power-job:
    image: ${CLOUD_DEPOSITORY_IP_PORT}/library/power-job:4.3.6
    container_name: ${NACOS_NAMESPACE}-power-job
    networks:
      - cloud_net
    restart: unless-stopped
    environment:
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      JVMOPTIONS: "-Xmx512m"
      PARAMS: "--oms.mongodb.enable=false --spring.profiles.active=product --spring.datasource.core.jdbc-url=jdbc:${DATASOURCE_DB_TYPE}://${DATASOURCE_HOST}:${DATASOURCE_PORT}/${NACOS_NAMESPACE}_power_job?${DATASOURCE_PARAM} --spring.datasource.core.username=${DATASOURCE_USERNAME} --spring.datasource.core.password=${DATASOURCE_PASSWORD} --spring.datasource.core.driver-class-name=${DATASOURCE_DRIVER}"
    volumes:
      - ./power-job:/root/powerjob/server/
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${POWER_JOB_HOST}:${POWER_JOB_PORT} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 512M
    env_file: .env
    depends_on:
      third-part-database-sync:
        condition: service_healthy
  third-part-database-sync:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/third-part-database-sync:${CLOUD_DEPOSITORY_TAG}
    container_name: ${NACOS_NAMESPACE}-third-part-database-sync
    networks:
      - cloud_net
    restart: unless-stopped
    environment:
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    command: sh -c "java -XX:+UseG1GC ${JAVA_OPS_LOG} ${JAVA_OPS_SYSTEM} ${JAVA_OPS_LOG_THIRD_PART_DATABASE_SYNC} ${JAVA_OPS_MODULAR_LIMITATIONS} -cp @/app/jib-classpath-file @/app/jib-main-class-file ${THIRD_PART_DATABASE_SYNC_MAIN_CLASS}"
    volumes:
      - ./third-part-database-sync/log:/log/third-part-database-sync
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${LOCAL_HOST_IP}:${PORT_DATA_SYNC} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    env_file: .env
    depends_on:
      mysql:
        condition: service_healthy
  third-part-config-sync:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/third-part-config-sync:${CLOUD_DEPOSITORY_TAG}
    container_name: ${NACOS_NAMESPACE}-third-part-config-sync
    networks:
      - cloud_net
    restart: unless-stopped
    environment:
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    command: sh -c "java -XX:+UseG1GC ${JAVA_OPS_LOG} ${JAVA_OPS_SYSTEM} ${JAVA_OPS_LOG_THIRD_PART_CONFIG_SYNC} ${JAVA_OPS_MODULAR_LIMITATIONS} -cp @/app/jib-classpath-file @/app/jib-main-class-file ${THIRD_PART_CONFIG_SYNC_MAIN_CLASS}"
    volumes:
      - ./third-part-config-sync/log:/log/third-part-config-sync
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${LOCAL_HOST_IP}:${PORT_CONFIG_SYNC} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    env_file: .env
    depends_on:
      nacos:
        condition: service_healthy
  platform-gateway:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/platform-gateway:${CLOUD_DEPOSITORY_TAG}
    container_name: ${NACOS_NAMESPACE}-platform-gateway
    networks:
      - cloud_net
    restart: unless-stopped
    environment:
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    #    ports:
    #      - "${PORT_PLATFORM_GATEWAY}:${PORT_PLATFORM_GATEWAY}"
    command: sh -c "java -XX:+UseG1GC ${JAVA_OPS_LOG} -Dreactor.netty.pool.leasingStrategy=lifo -Dcsp.sentinel.app.type=1 ${JAVA_OPS_SYSTEM} ${JAVA_OPS_LOG_PLATFORM_GATEWAY} ${JAVA_OPS_MODULAR_LIMITATIONS} -cp @/app/jib-classpath-file @/app/jib-main-class-file ${PLATFORM_GATEWAY_MAIN_CLASS}"
    volumes:
      - ./log/platform-gateway:/log/platform-gateway
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${LOCAL_HOST_IP}:${PORT_PLATFORM_GATEWAY}/ping || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 512M
    env_file: .env
    depends_on:
      third-part-config-sync:
        condition: service_healthy
  platform-system:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/platform-system:${CLOUD_DEPOSITORY_TAG}
    container_name: ${NACOS_NAMESPACE}-platform-system
    networks:
      - cloud_net
    restart: unless-stopped
    environment:
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    command: sh -c "java -XX:+UseG1GC ${JAVA_OPS_LOG} ${JAVA_OPS_SYSTEM} ${JAVA_OPS_LOG_PLATFORM_SYSTEM} ${JAVA_OPS_MODULAR_LIMITATIONS} -cp @/app/jib-classpath-file @/app/jib-main-class-file ${PLATFORM_SYSTEM_MAIN_CLASS}"
    volumes:
      - ./log/platform-system:/log/platform-system
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${LOCAL_HOST_IP}:${PORT_PLATFORM_SYSTEM} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 512M
    env_file: .env
    depends_on:
      third-part-config-sync:
        condition: service_healthy
  platform-maintenance:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/platform-maintenance:${CLOUD_DEPOSITORY_TAG}
    container_name: ${NACOS_NAMESPACE}-platform-maintenance
    networks:
      - cloud_net
    restart: unless-stopped
    environment:
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    command: sh -c "java -XX:+UseG1GC ${JAVA_OPS_LOG} ${JAVA_OPS_SYSTEM} ${JAVA_OPS_LOG_PLATFORM_MAINTENANCE} ${JAVA_OPS_MODULAR_LIMITATIONS} -cp @/app/jib-classpath-file @/app/jib-main-class-file ${PLATFORM_MAINTENANCE_MAIN_CLASS}"
    volumes:
      - ./log/platform-maintenance:/log/platform-maintenance
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${LOCAL_HOST_IP}:${PORT_PLATFORM_MAINTENANCE} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    env_file: .env
    depends_on:
      third-part-config-sync:
        condition: service_healthy
  test-test:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/test-test:${CLOUD_DEPOSITORY_TAG}
    container_name: ${NACOS_NAMESPACE}-test-test
    networks:
      - cloud_net
    restart: unless-stopped
    environment:
      # 设置时区
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    command: sh -c "java -XX:+UseG1GC ${JAVA_OPS_LOG} ${JAVA_OPS_SYSTEM} ${JAVA_OPS_LOG_TEST_TEST} ${JAVA_OPS_MODULAR_LIMITATIONS} -cp @/app/jib-classpath-file @/app/jib-main-class-file ${TEST_TEST_MAIN_CLASS}"
    volumes:
      - ./log/test-test:/log/test-test
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${LOCAL_HOST_IP}:${PORT_TEST_TEST} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    env_file: .env
    depends_on:
      third-part-config-sync:
        condition: service_healthy

networks:
  cloud_net:
    external: true
    name: zclcs_net