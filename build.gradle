buildscript {
    ext {
        springBootVersion = "3.0.1"
        springBootNativeVersion = "0.9.19"
        springCloudVersion = "2022.0.0"
        springCloudAlibabaVersion = "2022.0.0.0-RC1"
        findbugsVersion = "3.0.2"
        lombokVersion = "1.18.24"
        hutoolVersion = "5.8.11"
        ip2regionVersion = "1.7.2"
        mybatisPlusVersion = "3.5.3.1"
        dynamicDatasourceVersion = "3.6.0"
        p6spyVersion = "3.9.1"
        swagger3xVersion = "2.2.7"
        knife4jVersion = "4.0.0"
//    jakartaSerletApiVersion = "6.0.0"
        apmToolkitLogbackVersion = "8.7.0"
        easyCaptchaVersion = "1.6.2"
        seataVersion = "1.6.1"
        minioVersion = "8.3.1"
        okhttpVersion = "4.9.0"
        jibVersion = "3.2.0"
        authorizationServerVersion = "1.0.0"
    }

    repositories {
        mavenLocal()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }
}

plugins {
    id "base"
    id "org.graalvm.buildtools.native" version "$springBootNativeVersion"
    id "org.springframework.boot" version "$springBootVersion"
}

ext {
    javaVersion = JavaVersion.VERSION_17
    sc = "${springBootVersion}"
    bom = Set.of(project(":cloud-bom"), project(":common"), project(":platform"), project(":platform:platform-system"))
    commons = (subprojects - bom)
}

subprojects {
    group = group
    version = version
}

configure(commons) {
    apply plugin: "java-library"
    sourceCompatibility = "$javaVersion"
    targetCompatibility = "$javaVersion"
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    configurations {
        management {
            canBeConsumed = false
            canBeResolved = false
            visible = false
        }
        compileClasspath.extendsFrom(management)
        testCompileClasspath.extendsFrom(management)
        runtimeClasspath.extendsFrom(management)
        testRuntimeClasspath.extendsFrom(management)
        annotationProcessor.extendsFrom(management)
        testAnnotationProcessor.extendsFrom(management)
    }

    dependencies {
        // import BOM.
        management platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
        management platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
        management platform("com.alibaba.cloud:spring-cloud-alibaba-dependencies:$springCloudAlibabaVersion")
        management platform(project(":cloud-bom"))
        management platform(project(":common"))
        compileOnly "org.slf4j:slf4j-api"
        compileOnly "jakarta.servlet:jakarta.servlet-api"
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"
        compileOnly "com.google.code.findbugs:jsr305"
        testCompileOnly "com.google.code.findbugs:jsr305"
        testCompileOnly "org.projectlombok:lombok"
        testCompileOnly "org.springframework:spring-test"
        testImplementation "org.slf4j:slf4j-api"
        testImplementation "org.junit.jupiter:junit-jupiter"
    }

    compileJava.options.compilerArgs.add '-parameters'
    compileTestJava.options.compilerArgs.add '-parameters'
    compileJava.dependsOn(processResources)
}