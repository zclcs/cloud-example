buildscript {
    ext {
        // 3.0.2 3.1.1 3.1.2
        springBootVersion = "3.1.2"
        // 0.9.18 0.9.23
        springBootNativeVersion = "0.9.23"
        // 2022.0.0 2022.0.3
        springCloudVersion = "2022.0.3"
        springCloudAlibabaVersion = "2022.0.0.0"
        seataVersion = "1.7.0"
        sentinelVersion = "1.8.6"
        findbugsVersion = "3.0.2"
        lombokVersion = "1.18.24"
        hutoolVersion = "5.8.21"
        mybatisPlusVersion = "3.5.3.2"
        p6spyVersion = "3.9.1"
        apmToolkitLogbackVersion = "8.7.0"
        easyCaptchaVersion = "1.6.2"
        minioVersion = "8.0.3"
        okhttpVersion = "4.9.0"
        jibVersion = "3.3.2"
        guavaVersion = "31.1-jre"
        easyCaptchaVersion = "1.6.2"
        jasyptVersion = "3.0.5"
        lombokMapstructBindingVersion = "0.2.0"
        guavaVersion = "31.1-jre"
        javassistVersion = "3.28.0-GA"
        redissonVersion = "3.20.0"
        xxlJobVersion = "2.4.0"
        janinoVersion = "3.1.9"
        saTokenVersion = "1.35.0.RC"
        easyexcelVersion = "3.3.2"
        mybatisFlexVersion = "1.6.4"
        mybatisVersion = "3.0.2"
    }
}

plugins {
    id "base"
    id "org.springframework.boot" version "$springBootVersion" apply false
    id "org.graalvm.buildtools.native" version "$springBootNativeVersion" apply false
    id "com.google.cloud.tools.jib" version "$jibVersion" apply false
}

ext {
    javaVersion = JavaVersion.VERSION_17
    bom = Set.of(project(":cloud-bom"), project(":common"), project(":cloud-lib"),
            project(":platform"), project(":platform:platform-system-bom"),
            project(":test"), project(":test:test-test-bom"))
    jibPackage = Set.of(
            project(":platform:platform-gateway"),
            project(":platform:platform-system-bom:platform-system"),
            project(":platform:platform-maintenance"),
            project(":test:test-test-bom:test-test"),
            project(":third-part-database-sync"),
            project(":third-part-config-sync")
    )
    nativePackage = Set.of(project(":third-part-database-sync"))
    commons = (subprojects - bom)
}

subprojects {
    group = group
    version = version
}

configure(commons) {
    apply plugin: "java-library"
    sourceCompatibility = "$javaVersion"
    targetCompatibility = "$javaVersion"
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }

    configurations {
        management {
            canBeConsumed = false
            canBeResolved = false
            visible = false
        }
        compileClasspath.extendsFrom(management)
        testCompileClasspath.extendsFrom(management)
        runtimeClasspath.extendsFrom(management)
        testRuntimeClasspath.extendsFrom(management)
        annotationProcessor.extendsFrom(management)
        testAnnotationProcessor.extendsFrom(management)
    }

    dependencies {
        // import BOM.
        management platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
        management platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
        management platform("com.alibaba.cloud:spring-cloud-alibaba-dependencies:$springCloudAlibabaVersion")
//        management platform("com.mybatis-flex:mybatis-flex-dependencies:$mybatisFlexVersion")
        management platform("cn.hutool:hutool-bom:$hutoolVersion")
        management platform("com.baomidou:mybatis-plus-bom:$mybatisPlusVersion")
        management platform(project(":cloud-bom"))
//        implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:$jasyptVersion"
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok-mapstruct-binding"
        annotationProcessor "com.mybatis-flex:mybatis-flex-processor:$mybatisFlexVersion"
    }

    compileJava.options.compilerArgs.add '-parameters'
    compileTestJava.options.compilerArgs.add '-parameters'
    compileJava.dependsOn(processResources)
}

configure(jibPackage) {
    apply plugin: "java"
    apply plugin: "com.google.cloud.tools.jib"

    jib {
        from {
            image = "${dockerJibFromImage}"
            auth {
                username = "${dockerJibAuthUsername}"
                password = "${dockerJibAuthPassword}"
            }
        }
        to {
            image = "${dockerJibToImage}/${project.name}"
            tags = ["${version}", "latest"]
            auth {
                username = "${dockerJibAuthUsername}"
                password = "${dockerJibAuthPassword}"
            }
        }
        allowInsecureRegistries = true
        container {
            environment = ["SW_AGENT_NAME": project.name, "TZ": "Asia/Shanghai"]
            entrypoint = "INHERIT"
            format = "OCI"
            creationTime = "USE_CURRENT_TIMESTAMP"
        }
    }
}

//configuration(nativePackage) {
//    apply plugin: "org.graalvm.buildtools.native"
//    bootBuildImage {
//        imageName = "${dockerJibToImage}/${project.name}:native"
//        docker {
//            host = "tcp://192.168.33.10:2375"
//            tlsVerify = false
//            builderRegistry {
//                username = "${dockerJibAuthUsername}"
//                password = "${dockerJibAuthPassword}"
//                url = "${dockerJibToImage}/${project.name}"
//                email = "2371219112@qq.com"
//            }
//        }
//    }
//}